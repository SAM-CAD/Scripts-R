library(rlang)
cat("  \n## Gráfico Distribuiçao", colunas[i],  "  \n")
var_corrente = colunas[i]
exp = parse_expr( paste0( var_contagem, "= n()"))
df  <- Arthritis %>%
group_by(!!sym(var_corrente)) %>%
summarise(!!exp)
View(df)
df  <- Arthritis %>%
group_by(!!sym(var_corrente)) %>%
summarise(!!exp)
colnames(df)[2] = var_contagem
plota_tree_barra2(df, var_corrente, var_contagem )
plota_tree_barra <- function(df,
var_corrente,
varContagem,
horizontal=TRUE,
titulo="Título Padrão")
{
treemap(df,
index=var_corrente,
vSize= varContagem, type="index", stdErr = NULL)
tit_legenda = gsub("_", " ", var_corrente )
p <- ggplot(df, aes(x = !!sym(var_corrente),
y= !!sym(varContagem),
fill=!!sym(var_corrente))) +
geom_col() +
labs(title= titulo,
subtitle= var_corrente,
x=var_corrente,
y= varContagem,
fill=tit_legenda) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5))
#scale_x_continuous(labels = scales::label_number(accuracy = 1, big.mark = "")) +
if( horizontal)
{
p <- p + coord_flip()
}
return(p)
}
plota_tree_barra2(df, var_corrente, var_contagem )
plota_tree_barra(df, var_corrente, var_contagem )
library(tidyverse)
library(rlang)
library(treemap)
plota_tree_barra <- function(df,
var_corrente,
varContagem,
horizontal=TRUE,
titulo="Título Padrão")
{
treemap(df,
index=var_corrente,
vSize= varContagem, type="index", stdErr = NULL)
tit_legenda = gsub("_", " ", var_corrente )
p <- ggplot(df, aes(x = !!sym(var_corrente),
y= !!sym(varContagem),
fill=!!sym(var_corrente))) +
geom_col() +
labs(title= titulo,
subtitle= var_corrente,
x=var_corrente,
y= varContagem,
fill=tit_legenda) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5))
if( horizontal)
{
p <- p + coord_flip()
}
return(p)
}
plota_tree_barra(df, var_corrente, var_contagem )
library(tidyverse)
library(rlang)
library(treemap)
plota_tree_barra <- function(df,
var_corrente,
varContagem,
horizontal=TRUE,
titulo="Título Padrão",
lado_a_lado = FALSE)
{
treemap(df,
index=var_corrente,
vSize= varContagem, type="index", stdErr = NULL)
tit_legenda = gsub("_", " ", var_corrente )
p <- ggplot(df, aes(x = !!sym(var_corrente),
y= !!sym(varContagem),
fill=!!sym(var_corrente))) +
geom_col() +
labs(title= titulo,
subtitle= var_corrente,
x=var_corrente,
y= varContagem,
fill=tit_legenda) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5))
if( horizontal)
{
p <- p + coord_flip()
}
return(p)
}
plota_tree_barra(df,
var_corrente,
var_contagem,
titulo = "Titulo Qualquer",
lado_a_lado = FALSE)
library(tidyverse)
library(rlang)
library(treemap)
plota_tree_barra <- function(df,
var_corrente,
varContagem,
horizontal=TRUE,
titulo="Título Padrão",
lado_a_lado = FALSE)
{
if ( lado_a_lado )
{
par(mfrow=c(2,1))
}
treemap(df,
index=var_corrente,
vSize= varContagem, type="index", stdErr = NULL)
tit_legenda = gsub("_", " ", var_corrente )
p <- ggplot(df, aes(x = !!sym(var_corrente),
y= !!sym(varContagem),
fill=!!sym(var_corrente))) +
geom_col() +
labs(title= titulo,
subtitle= var_corrente,
x=var_corrente,
y= varContagem,
fill=tit_legenda) +
theme(legend.position="bottom",
plot.title = element_text(hjust=0.5),
plot.subtitle = element_text(hjust=0.5))
if( horizontal)
{
p <- p + coord_flip()
}
return(p)
}
plota_tree_barra(df,
var_corrente,
var_contagem,
titulo = "Titulo Qualquer",
lado_a_lado = FALSE)
library(gridExtra)
###### PROGRAMA PRINCIPAL
library(tidyverse)
library(rlang)
library(treemap)
library(gridExtra)
source("plota_tree_barra.R")
# um data frame de categorias como exemplo
library(vcd)
## Load Arthritis dataset (data frame)
data(Arthritis)
# colnames(Arthritis)
# "ID"        "Treatment" "Sex"       "Age"       "Improved"
#colunas de interesse
colunas =  c( "Treatment", "Sex"  , "Improved" )
var_contagem = "nObjetos"
for ( i in 1:length(colunas))
{
cat("  \n## Gráfico Distribuiçao", colunas[i],  "  \n")
var_corrente = colunas[i]
exp = parse_expr( paste0( var_contagem, "= n()"))
df  <- Arthritis %>%
group_by(!!sym(var_corrente)) %>%
summarise(!!exp)
colnames(df)[2] = var_contagem
p <- plota_tree_barra(df,
var_corrente,
var_contagem,
titulo = "Titulo Qualquer",
lado_a_lado = FALSE)
print(
p
)
cat("  \n")
}
###### PROGRAMA PRINCIPAL
library(tidyverse)
library(rlang)
library(treemap)
library(gridExtra)
source("plota_tree_barra.R")
# um data frame de categorias como exemplo
library(vcd)
## Load Arthritis dataset (data frame)
data(Arthritis)
# colnames(Arthritis)
# "ID"        "Treatment" "Sex"       "Age"       "Improved"
#colunas de interesse
colunas =  c( "Treatment", "Sex"  , "Improved" )
var_contagem = "nObjetos"
for ( i in 1:length(colunas))
{
cat("  \n## Gráfico Distribuiçao", colunas[i],  "  \n")
var_corrente = colunas[i]
exp = parse_expr( paste0( var_contagem, "= n()"))
df  <- Arthritis %>%
group_by(!!sym(var_corrente)) %>%
summarise(!!exp)
colnames(df)[2] = var_contagem
plota_tree_barra(df,
var_corrente,
var_contagem,
titulo = "Titulo Qualquer",
lado_a_lado = FALSE)
cat("  \n")
}
###### PROGRAMA PRINCIPAL
library(tidyverse)
library(rlang)
library(treemap)
library(gridExtra)
source("plota_tree_barra.R")
# um data frame de categorias como exemplo
library(vcd)
## Load Arthritis dataset (data frame)
data(Arthritis)
# colnames(Arthritis)
# "ID"        "Treatment" "Sex"       "Age"       "Improved"
#colunas de interesse
colunas =  c( "Treatment", "Sex"  , "Improved" )
var_contagem = "nObjetos"
for ( i in 1:length(colunas))
{
cat("  \n## Gráfico Distribuiçao", colunas[i],  "  \n")
var_corrente = colunas[i]
exp = parse_expr( paste0( var_contagem, "= n()"))
df  <- Arthritis %>%
group_by(!!sym(var_corrente)) %>%
summarise(!!exp)
colnames(df)[2] = var_contagem
plota_tree_barra(df,
var_corrente,
var_contagem,
titulo = "Titulo Qualquer",
lado_a_lado = TRUE)
cat("  \n")
}
###### PROGRAMA PRINCIPAL
library(tidyverse)
library(rlang)
library(treemap)
library(gridExtra)
source("plota_tree_barra.R")
# um data frame de categorias como exemplo
library(vcd)
## Load Arthritis dataset (data frame)
data(Arthritis)
# colnames(Arthritis)
# "ID"        "Treatment" "Sex"       "Age"       "Improved"
#colunas de interesse
colunas =  c( "Treatment", "Sex"  , "Improved" )
var_contagem = "nObjetos"
for ( i in 1:length(colunas))
{
cat("  \n## Gráfico Distribuiçao", colunas[i],  "  \n")
var_corrente = colunas[i]
exp = parse_expr( paste0( var_contagem, "= n()"))
df  <- Arthritis %>%
group_by(!!sym(var_corrente)) %>%
summarise(!!exp)
colnames(df)[2] = var_contagem
plota_tree_barra(df,
var_corrente,
var_contagem,
titulo = "Titulo Qualquer",
lado_a_lado = TRUE)
cat("  \n")
}
?gridExtra
install.packages("gridExtra")
library(gridExtra)
?ggarrange
library(grid)
?ggarrange
install.packages("ggpubr")
library("ggpubr")
###### PROGRAMA PRINCIPAL
library(tidyverse)
library(rlang)
library(treemap)
library(gridExtra)
source("plota_tree_barra.R")
# um data frame de categorias como exemplo
library(vcd)
## Load Arthritis dataset (data frame)
data(Arthritis)
# colnames(Arthritis)
# "ID"        "Treatment" "Sex"       "Age"       "Improved"
#colunas de interesse
colunas =  c( "Treatment", "Sex"  , "Improved" )
var_contagem = "nObjetos"
for ( i in 1:length(colunas))
{
cat("  \n## Gráfico Distribuiçao", colunas[i],  "  \n")
var_corrente = colunas[i]
exp = parse_expr( paste0( var_contagem, "= n()"))
df  <- Arthritis %>%
group_by(!!sym(var_corrente)) %>%
summarise(!!exp)
colnames(df)[2] = var_contagem
plota_tree_barra(df,
var_corrente,
var_contagem,
titulo = "Titulo Qualquer",
lado_a_lado = TRUE)
cat("  \n")
}
View(Arthritis)
p <- treemap(df,2,"nObjetos")
p <- treemap(df,1,"nObjetos")
df
p <- treemap(df,"Improved","nObjetos")
class(p)
str(p)
p <- print(treemap(df,"Improved","nObjetos"))
class(p)
str(p)
p <- as.grob(treemap(df,"Improved","nObjetos"))
library(ggplotfy)
install.packages("ggplotify")
library(ggplotfy)
library(ggplotify)
p <- as.grob(treemap(df,"Improved","nObjetos"))
p <- as.ggplot(treemap(df,"Improved","nObjetos"))
data(business)
treegraph(business, index=c("NACE1", "NACE2", "NACE3", "NACE4"), show.labels=FALSE)
###### PROGRAMA PRINCIPAL
library(tidyverse)
library(rlang)
library(treemap)
source("plota_tree_barra.R")
# um data frame de categorias como exemplo
library(vcd)
## Load Arthritis dataset (data frame)
data(Arthritis)
# colnames(Arthritis)
# "ID"        "Treatment" "Sex"       "Age"       "Improved"
#colunas de interesse
colunas =  c( "Treatment", "Sex"  , "Improved" )
var_contagem = "nObjetos"
for ( i in 1:length(colunas))
{
cat("  \n## Gráfico Distribuiçao", colunas[i],  "  \n")
var_corrente = colunas[i]
exp = parse_expr( paste0( var_contagem, "= n()"))
df  <- Arthritis %>%
group_by(!!sym(var_corrente)) %>%
summarise(!!exp)
colnames(df)[2] = var_contagem
plota_tree_barra(df,
var_corrente,
var_contagem,
titulo = "Titulo Qualquer",
lado_a_lado = TRUE)
cat("  \n")
}
cpbs <- read_feather("../../repobackup_iMac/MV_CPB.feather")
# Testa abrevia_avalores()
###### PROGRAMA PRINCIPAL
library(tidyverse)
library(rlang)
library(treemap)
library(feather)
cpbs <- read_feather("../../repobackup_iMac/MV_CPB.feather")
cpbs <- read_feather("../../repobackup_iMac/MV-CPB.feather")
cpbs <- read_feather("../../repobackup-iMac/MV_CPB.feather")
cpbs <- read_feather("../../repobackup-iMac/amostras/MV_CPB.feather")
cpbs <- read_feather("../repobackup-iMac/amostras/MV_CPB.feather")
View(cpbs)
colnames(cpbs)
# quais são valores únicos do campo GENERO?
unique(cpbs$GENERO)
apply(tmp, nchar)
lapply(tmp, nchar)
tmp = unique(cpbs$GENERO)
# qual o tamanho da maior string entre esses valores em tmp?
lapply(tmp, nchar)
unlist(lapply(tmp, nchar)) > 20
tmp[which(unlist(lapply(tmp, nchar)) > 20)]
cpbs %>% group_by(GENERO) %>% summarise(nRegistros= n())
df_abreviado <- abrevia_valores(cpbs, "GENERO")
# Testa abrevia_avalores()
###### PROGRAMA PRINCIPAL
library(tidyverse)
library(rlang)
library(treemap)
library(feather)
# carrega a função
source("abrevia_valores.R")
#carrega a tabela de CPBs
cpbs <- read_feather("../repobackup-iMac/amostras/MV_CPB.feather")
# quais são as colunas do data.frame?
# colnames(cpbs)
# [1] "ID_OBRA"                        "NUMERO_CPB"                     "TITULO_ORIGINAL"
# [4] "DATA_EMISSAO_CPB"               "SITUACAO_CPB"                   "NOME_REQUERENTE"
# [7] "NUMERO_CPF_CNPJ_REQUERENTE"     "NUMERO_REGISTRO_REQUERENTE"     "REGIME_CO_PRODUCAO"
# [10] "FOMENTO_DIRETO"                 "INVESTIMENTO_FSA"               "CONSTITUIDA_OBRAS_MENORES"
# [13] "ORGANIZACAO_TEMPORAL"           "DURACAO_TOTAL_CPB"              "ANO_PRODUCAO"
# [16] "GENERO"                         "SUBGENERO"                      "FORMATO_PRIMEIRA_COPIA"
# [19] "TRANSMISSAO_AO_VIVO"            "DATA_PRIMEIRA_TRANSMISSAO"      "SEG_MERCADO_INICIAL_PRETENDIDO"
# [22] "CLASSIFICACAO"
# quais são valores únicos do campo GENERO?
unique(cpbs$GENERO)
# [1] "FICC?O"                                          "DOCUMENTARIO"
# [3] "ANIMAC?O"                                        "VARIEDADES"
# [5] "REALITY-SHOW"                                    "N?O CLASSIFICADA"
# [7] "VIDEOMUSICAL"                                    "JORNALISTICA"
# [9] "PROGRAMA DE AUDITORIO ANCORADO POR APRESENTADOR" "RELIGIOSA"
# [11] "MANIFESTAC?ES E EVENTOS ESPORTIVOS"
# existem 2 valores muito compridos para os graficos # [9] "PROGRAMA DE AUDITORIO ANCORADO POR APRESENTADOR"
# e "MANIFESTAC?ES E EVENTOS ESPORTIVOS"
tmp = unique(cpbs$GENERO)
# qual desse valores tem mais do que 20 caracteres?
tmp[which(unlist(lapply(tmp, nchar)) > 20)]
# quantos registros existem nesse data frame para cada GENERO?
cpbs %>% group_by(GENERO) %>% summarise(nRegistros= n())
# # A tibble: 11 x 2
# GENERO                                          nRegistros
# <chr>                                                <int>
#   1 ANIMAC?O                                              2462
# 2 DOCUMENTARIO                                          9637
# 3 FICC?O                                               13487
# 4 JORNALISTICA                                           626
# 5 MANIFESTAC?ES E EVENTOS ESPORTIVOS                      21
# 6 N?O CLASSIFICADA                                      4089
# 7 PROGRAMA DE AUDITORIO ANCORADO POR APRESENTADOR        174
# 8 REALITY-SHOW                                           319
# 9 RELIGIOSA                                              214
# 10 VARIEDADES                                            1646
# 11 VIDEOMUSICAL                                          7968
# vamos abreviar entao?
df_abreviado <- abrevia_valores(cpbs, "GENERO")
# Testa abrevia_avalores()
###### PROGRAMA PRINCIPAL
library(tidyverse)
library(rlang)
library(treemap)
library(feather)
library(kableExtra)
# carrega a função
source("abrevia_valores.R")
#carrega a tabela de CPBs
cpbs <- read_feather("../repobackup-iMac/amostras/MV_CPB.feather")
# quais são as colunas do data.frame?
# colnames(cpbs)
# [1] "ID_OBRA"                        "NUMERO_CPB"                     "TITULO_ORIGINAL"
# [4] "DATA_EMISSAO_CPB"               "SITUACAO_CPB"                   "NOME_REQUERENTE"
# [7] "NUMERO_CPF_CNPJ_REQUERENTE"     "NUMERO_REGISTRO_REQUERENTE"     "REGIME_CO_PRODUCAO"
# [10] "FOMENTO_DIRETO"                 "INVESTIMENTO_FSA"               "CONSTITUIDA_OBRAS_MENORES"
# [13] "ORGANIZACAO_TEMPORAL"           "DURACAO_TOTAL_CPB"              "ANO_PRODUCAO"
# [16] "GENERO"                         "SUBGENERO"                      "FORMATO_PRIMEIRA_COPIA"
# [19] "TRANSMISSAO_AO_VIVO"            "DATA_PRIMEIRA_TRANSMISSAO"      "SEG_MERCADO_INICIAL_PRETENDIDO"
# [22] "CLASSIFICACAO"
# quais são valores únicos do campo GENERO?
unique(cpbs$GENERO)
# [1] "FICC?O"                                          "DOCUMENTARIO"
# [3] "ANIMAC?O"                                        "VARIEDADES"
# [5] "REALITY-SHOW"                                    "N?O CLASSIFICADA"
# [7] "VIDEOMUSICAL"                                    "JORNALISTICA"
# [9] "PROGRAMA DE AUDITORIO ANCORADO POR APRESENTADOR" "RELIGIOSA"
# [11] "MANIFESTAC?ES E EVENTOS ESPORTIVOS"
# existem 2 valores muito compridos para os graficos # [9] "PROGRAMA DE AUDITORIO ANCORADO POR APRESENTADOR"
# e "MANIFESTAC?ES E EVENTOS ESPORTIVOS"
tmp = unique(cpbs$GENERO)
# qual desse valores tem mais do que 20 caracteres?
tmp[which(unlist(lapply(tmp, nchar)) > 20)]
# quantos registros existem nesse data frame para cada GENERO?
cpbs %>% group_by(GENERO) %>% summarise(nRegistros= n())
# # A tibble: 11 x 2
# GENERO                                          nRegistros
# <chr>                                                <int>
#   1 ANIMAC?O                                              2462
# 2 DOCUMENTARIO                                          9637
# 3 FICC?O                                               13487
# 4 JORNALISTICA                                           626
# 5 MANIFESTAC?ES E EVENTOS ESPORTIVOS                      21
# 6 N?O CLASSIFICADA                                      4089
# 7 PROGRAMA DE AUDITORIO ANCORADO POR APRESENTADOR        174
# 8 REALITY-SHOW                                           319
# 9 RELIGIOSA                                              214
# 10 VARIEDADES                                            1646
# 11 VIDEOMUSICAL                                          7968
# vamos abreviar entao?
df_abreviado <- abrevia_valores(cpbs, "GENERO")
View(df_abreviado)
unique(df_abreviado$GENERO)
# qual desse valores tem mais do que 20 caracteres?
tmp[which(unlist(lapply(tmp, nchar)) > 20)]
tmp[which(unlist(lapply(unique(df_abreviado$GENERO), nchar)) > 20)]
# requer openxlsx
library(openxlsx)
source("salva_xlsx.R")
# nome das abas
listaAbas = c("aba1", "aba2")
# nome dos data frames
listaDFs = c("iris", "mtcars")
nome_arquivo = "planilha_teste.xlsx"
salva_xlsx(listaDFs, listaAbas, nome_arquivo )
